// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway.proto

package gateway

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Specification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpecificationMultiError, or
// nil if none found.
func (m *Specification) ValidateAll() error {
	return m.validate(true)
}

func (m *Specification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for GitPath

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecificationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecificationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecificationMultiError(errors)
	}

	return nil
}

// SpecificationMultiError is an error wrapping multiple validation errors
// returned by Specification.ValidateAll() if the designated constraints
// aren't met.
type SpecificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecificationMultiError) AllErrors() []error { return m }

// SpecificationValidationError is the validation error returned by
// Specification.Validate if the designated constraints aren't met.
type SpecificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecificationValidationError) ErrorName() string { return "SpecificationValidationError" }

// Error satisfies the builtin error interface
func (e SpecificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecificationValidationError{}

// Validate checks the field values on CommitPushResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommitPushResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitPushResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitPushResultMultiError, or nil if none found.
func (m *CommitPushResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitPushResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommitHash

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return CommitPushResultMultiError(errors)
	}

	return nil
}

// CommitPushResultMultiError is an error wrapping multiple validation errors
// returned by CommitPushResult.ValidateAll() if the designated constraints
// aren't met.
type CommitPushResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitPushResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitPushResultMultiError) AllErrors() []error { return m }

// CommitPushResultValidationError is the validation error returned by
// CommitPushResult.Validate if the designated constraints aren't met.
type CommitPushResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitPushResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitPushResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitPushResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitPushResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitPushResultValidationError) ErrorName() string { return "CommitPushResultValidationError" }

// Error satisfies the builtin error interface
func (e CommitPushResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitPushResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitPushResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitPushResultValidationError{}

// Validate checks the field values on MLDevResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MLDevResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MLDevResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MLDevResultMultiError, or
// nil if none found.
func (m *MLDevResult) ValidateAll() error {
	return m.validate(true)
}

func (m *MLDevResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return MLDevResultMultiError(errors)
	}

	return nil
}

// MLDevResultMultiError is an error wrapping multiple validation errors
// returned by MLDevResult.ValidateAll() if the designated constraints aren't met.
type MLDevResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MLDevResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MLDevResultMultiError) AllErrors() []error { return m }

// MLDevResultValidationError is the validation error returned by
// MLDevResult.Validate if the designated constraints aren't met.
type MLDevResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MLDevResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MLDevResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MLDevResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MLDevResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MLDevResultValidationError) ErrorName() string { return "MLDevResultValidationError" }

// Error satisfies the builtin error interface
func (e MLDevResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMLDevResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MLDevResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MLDevResultValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on StatusUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusUpdateMultiError, or
// nil if none found.
func (m *StatusUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewStatus

	if len(errors) > 0 {
		return StatusUpdateMultiError(errors)
	}

	return nil
}

// StatusUpdateMultiError is an error wrapping multiple validation errors
// returned by StatusUpdate.ValidateAll() if the designated constraints aren't met.
type StatusUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusUpdateMultiError) AllErrors() []error { return m }

// StatusUpdateValidationError is the validation error returned by
// StatusUpdate.Validate if the designated constraints aren't met.
type StatusUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusUpdateValidationError) ErrorName() string { return "StatusUpdateValidationError" }

// Error satisfies the builtin error interface
func (e StatusUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusUpdateValidationError{}

// Validate checks the field values on StatusUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusUpdateResponseMultiError, or nil if none found.
func (m *StatusUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return StatusUpdateResponseMultiError(errors)
	}

	return nil
}

// StatusUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by StatusUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type StatusUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusUpdateResponseMultiError) AllErrors() []error { return m }

// StatusUpdateResponseValidationError is the validation error returned by
// StatusUpdateResponse.Validate if the designated constraints aren't met.
type StatusUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusUpdateResponseValidationError) ErrorName() string {
	return "StatusUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StatusUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusUpdateResponseValidationError{}

// Validate checks the field values on ValidationResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationResultMultiError, or nil if none found.
func (m *ValidationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Hints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Hints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Hints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidationResultMultiError(errors)
	}

	return nil
}

// ValidationResultMultiError is an error wrapping multiple validation errors
// returned by ValidationResult.ValidateAll() if the designated constraints
// aren't met.
type ValidationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationResultMultiError) AllErrors() []error { return m }

// ValidationResultValidationError is the validation error returned by
// ValidationResult.Validate if the designated constraints aren't met.
type ValidationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationResultValidationError) ErrorName() string { return "ValidationResultValidationError" }

// Error satisfies the builtin error interface
func (e ValidationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationResultValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on Hint with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hint with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HintMultiError, or nil if none found.
func (m *Hint) ValidateAll() error {
	return m.validate(true)
}

func (m *Hint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HintMultiError(errors)
	}

	return nil
}

// HintMultiError is an error wrapping multiple validation errors returned by
// Hint.ValidateAll() if the designated constraints aren't met.
type HintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HintMultiError) AllErrors() []error { return m }

// HintValidationError is the validation error returned by Hint.Validate if the
// designated constraints aren't met.
type HintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HintValidationError) ErrorName() string { return "HintValidationError" }

// Error satisfies the builtin error interface
func (e HintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HintValidationError{}

// Validate checks the field values on GetSpecificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecificationRequestMultiError, or nil if none found.
func (m *GetSpecificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSpecificationRequestMultiError(errors)
	}

	return nil
}

// GetSpecificationRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecificationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSpecificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecificationRequestMultiError) AllErrors() []error { return m }

// GetSpecificationRequestValidationError is the validation error returned by
// GetSpecificationRequest.Validate if the designated constraints aren't met.
type GetSpecificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecificationRequestValidationError) ErrorName() string {
	return "GetSpecificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecificationRequestValidationError{}

// Validate checks the field values on UpdateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpecificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpecificationRequestMultiError, or nil if none found.
func (m *UpdateSpecificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpecificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SpecificationContent

	if len(errors) > 0 {
		return UpdateSpecificationRequestMultiError(errors)
	}

	return nil
}

// UpdateSpecificationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSpecificationRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSpecificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpecificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpecificationRequestMultiError) AllErrors() []error { return m }

// UpdateSpecificationRequestValidationError is the validation error returned
// by UpdateSpecificationRequest.Validate if the designated constraints aren't met.
type UpdateSpecificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpecificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpecificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpecificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpecificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpecificationRequestValidationError) ErrorName() string {
	return "UpdateSpecificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpecificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpecificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpecificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpecificationRequestValidationError{}

// Validate checks the field values on UpdateSpecificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpecificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpecificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpecificationResponseMultiError, or nil if none found.
func (m *UpdateSpecificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpecificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return UpdateSpecificationResponseMultiError(errors)
	}

	return nil
}

// UpdateSpecificationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSpecificationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSpecificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpecificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpecificationResponseMultiError) AllErrors() []error { return m }

// UpdateSpecificationResponseValidationError is the validation error returned
// by UpdateSpecificationResponse.Validate if the designated constraints
// aren't met.
type UpdateSpecificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpecificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpecificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpecificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpecificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpecificationResponseValidationError) ErrorName() string {
	return "UpdateSpecificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpecificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpecificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpecificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpecificationResponseValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on UpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusRequestMultiError, or nil if none found.
func (m *UpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStatusUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStatusRequestValidationError{
					field:  "StatusUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStatusRequestValidationError{
					field:  "StatusUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStatusRequestValidationError{
				field:  "StatusUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusRequestMultiError) AllErrors() []error { return m }

// UpdateStatusRequestValidationError is the validation error returned by
// UpdateStatusRequest.Validate if the designated constraints aren't met.
type UpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusRequestValidationError) ErrorName() string {
	return "UpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusRequestValidationError{}

// Validate checks the field values on ValidateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateSpecificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateSpecificationRequestMultiError, or nil if none found.
func (m *ValidateSpecificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateSpecificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SpecificationContent

	if len(errors) > 0 {
		return ValidateSpecificationRequestMultiError(errors)
	}

	return nil
}

// ValidateSpecificationRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateSpecificationRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateSpecificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateSpecificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateSpecificationRequestMultiError) AllErrors() []error { return m }

// ValidateSpecificationRequestValidationError is the validation error returned
// by ValidateSpecificationRequest.Validate if the designated constraints
// aren't met.
type ValidateSpecificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateSpecificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateSpecificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateSpecificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateSpecificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateSpecificationRequestValidationError) ErrorName() string {
	return "ValidateSpecificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateSpecificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateSpecificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateSpecificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateSpecificationRequestValidationError{}
