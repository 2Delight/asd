// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: validator.proto

package validator

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ValidateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateSpecificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateSpecificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateSpecificationRequestMultiError, or nil if none found.
func (m *ValidateSpecificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateSpecificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateSpecificationRequestValidationError{
					field:  "Specification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateSpecificationRequestValidationError{
					field:  "Specification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateSpecificationRequestValidationError{
				field:  "Specification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateSpecificationRequestMultiError(errors)
	}

	return nil
}

// ValidateSpecificationRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateSpecificationRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateSpecificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateSpecificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateSpecificationRequestMultiError) AllErrors() []error { return m }

// ValidateSpecificationRequestValidationError is the validation error returned
// by ValidateSpecificationRequest.Validate if the designated constraints
// aren't met.
type ValidateSpecificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateSpecificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateSpecificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateSpecificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateSpecificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateSpecificationRequestValidationError) ErrorName() string {
	return "ValidateSpecificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateSpecificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateSpecificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateSpecificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateSpecificationRequestValidationError{}

// Validate checks the field values on ValidationResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationResultMultiError, or nil if none found.
func (m *ValidationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Hints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Hints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Hints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidationResultMultiError(errors)
	}

	return nil
}

// ValidationResultMultiError is an error wrapping multiple validation errors
// returned by ValidationResult.ValidateAll() if the designated constraints
// aren't met.
type ValidationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationResultMultiError) AllErrors() []error { return m }

// ValidationResultValidationError is the validation error returned by
// ValidationResult.Validate if the designated constraints aren't met.
type ValidationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationResultValidationError) ErrorName() string { return "ValidationResultValidationError" }

// Error satisfies the builtin error interface
func (e ValidationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationResultValidationError{}

// Validate checks the field values on Specification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpecificationMultiError, or
// nil if none found.
func (m *Specification) ValidateAll() error {
	return m.validate(true)
}

func (m *Specification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	if len(errors) > 0 {
		return SpecificationMultiError(errors)
	}

	return nil
}

// SpecificationMultiError is an error wrapping multiple validation errors
// returned by Specification.ValidateAll() if the designated constraints
// aren't met.
type SpecificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecificationMultiError) AllErrors() []error { return m }

// SpecificationValidationError is the validation error returned by
// Specification.Validate if the designated constraints aren't met.
type SpecificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecificationValidationError) ErrorName() string { return "SpecificationValidationError" }

// Error satisfies the builtin error interface
func (e SpecificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecificationValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on Hint with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hint with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HintMultiError, or nil if none found.
func (m *Hint) ValidateAll() error {
	return m.validate(true)
}

func (m *Hint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HintMultiError(errors)
	}

	return nil
}

// HintMultiError is an error wrapping multiple validation errors returned by
// Hint.ValidateAll() if the designated constraints aren't met.
type HintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HintMultiError) AllErrors() []error { return m }

// HintValidationError is the validation error returned by Hint.Validate if the
// designated constraints aren't met.
type HintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HintValidationError) ErrorName() string { return "HintValidationError" }

// Error satisfies the builtin error interface
func (e HintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HintValidationError{}

// Validate checks the field values on GetHelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHelloRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHelloRequestMultiError, or nil if none found.
func (m *GetHelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHelloRequestMultiError(errors)
	}

	return nil
}

// GetHelloRequestMultiError is an error wrapping multiple validation errors
// returned by GetHelloRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHelloRequestMultiError) AllErrors() []error { return m }

// GetHelloRequestValidationError is the validation error returned by
// GetHelloRequest.Validate if the designated constraints aren't met.
type GetHelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHelloRequestValidationError) ErrorName() string { return "GetHelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHelloRequestValidationError{}

// Validate checks the field values on GetHelloResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHelloResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHelloResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHelloResponseMultiError, or nil if none found.
func (m *GetHelloResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHelloResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pong

	if len(errors) > 0 {
		return GetHelloResponseMultiError(errors)
	}

	return nil
}

// GetHelloResponseMultiError is an error wrapping multiple validation errors
// returned by GetHelloResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHelloResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHelloResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHelloResponseMultiError) AllErrors() []error { return m }

// GetHelloResponseValidationError is the validation error returned by
// GetHelloResponse.Validate if the designated constraints aren't met.
type GetHelloResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHelloResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHelloResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHelloResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHelloResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHelloResponseValidationError) ErrorName() string { return "GetHelloResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHelloResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHelloResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHelloResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHelloResponseValidationError{}
